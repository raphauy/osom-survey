
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  role          String    @default("user")
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  client        Client?    @relation(fields: [clientId], references: [id], onDelete: NoAction)
  clientId      String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Config {
  id             String       @id @default(cuid())
  name           String       @unique
  value          String?      @db.Text
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt  
}

model Client {
  id                String   @id @default(cuid())
  name              String
  description       String?
  url               String?
  slug              String    @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  users             User[]
  conversations     Conversation[]
  whatsappEndpoint  String?
  prompt            String?   @db.Text
  topics            Topic[]
}


model Conversation {
  id            String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  phone           String
  messages        Message[]
  topicResponses TopicResponse[]
  client          Client  @relation(fields: [clientId], references: [id], onDelete: NoAction)
  clientId        String
  survey          Survey? @relation(fields: [surveyId], references: [id], onDelete: NoAction)
  surveyId        String?
}

model Message {
  id             String      @id @default(cuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  role           String
  name           String?
  content        String      @db.Text
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Topic {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())       // gennext: skip.zod
  updatedAt   DateTime  @updatedAt            // gennext: skip.zod
  name        String                          // gennext: show.column
  prompt      String    @db.Text              // gennext: show.column
  enabled     Boolean   @default(true)        // gennext: skip.zod show.column
  client      Client    @relation(fields: [clientId], references: [id], onDelete: NoAction)
  clientId    String
  responses   TopicResponse[]
  categories  Category[]
}

model TopicResponse {
  id                String    @id @default(cuid())
  phone             String                          // gennext: show.column
  createdAt         DateTime  @default(now())       // gennext: skip.zod
  updatedAt         DateTime  @updatedAt            // gennext: skip.zod
  respuestaPlanteo  String    @db.Text              // gennext: show.column
  respuestaSolucion String    @db.Text              // gennext: show.column
  gravedad          Int       @default(0)           // gennext: skip.zod show.column
  topic             Topic     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId           String
  conversation      Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId    String
  category          Category? @relation(fields: [categoryId], references: [id], onDelete: NoAction)
  categoryId        String?
}

model Survey {
  id                          String    @id @default(cuid())
  phone                       String    @unique
  idcrm                       String?
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  votoPartido                 String?
  preferenciaPartido          String?
  candidatoPreferencia        String?
  candidatoInternoPreferencia String?
  mediosInformacion           String?
  edad                        String?
  departamentoResidencia      String?
  conversations               Conversation[]
}

// cada categoría es de un topic
// cada topic tiene varias categorías
// cada topicResponse puede tener 0 o 1 categoría y la categoría debe pertenecer al topic
model Category {
  id          String    @id @default(cuid())
  name        String                                // gennext: show.column
  description String?                               // gennext: show.column

  createdAt   DateTime  @default(now())             // gennext: skip.zod
  updatedAt   DateTime  @updatedAt                  // gennext: skip.zod

  topic       Topic     @relation(fields: [topicId], references: [id], onDelete: NoAction)
  topicId     String

  topicResponses TopicResponse[]
}